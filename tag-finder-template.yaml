AWSTemplateFormatVersion: '2010-09-09'

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Tag-Finder-VPC

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: PublicSubnet1

  # Public submet 2
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: PublicSubnet2

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # ECS Cluster
  TagFinderCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: TagFinderCluster

  # Task Execution Role
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: TaskExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                Resource: '*'

  S3AccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonRDSFullAccess
      Policies:
        - PolicyName: SSMParameterStoreAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "ssm:GetParameter"
                  - "ssm:GetParameters"
                  - "ssm:GetParametersByPath"
                Resource: "*"


  # Create log group
  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: tag-finder-log-group

  # ECS Task Definition 
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: tag-finder-task
      RequiresCompatibilities:
        - FARGATE
      Cpu: '2048'
      Memory: '4096'
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt S3AccessRole.Arn
      ContainerDefinitions:
        - Name: tag-finder-container
          Essential: true
          Image: public.ecr.aws/z2w7p2s7/labs:latest
          PortMappings:
            - ContainerPort: 8080
              # HostPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: tag-finder-log-group
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow HTTP and HTTPS traffic to the Load Balancer"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0


  ECSServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow inbound traffic from Load Balancer to ECS service"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0


  # Application Load Balancer
  TagFinderLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: tag-finder-load-balancer
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Scheme: internet-facing
      Type: application

  ECSLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: Main-TG
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 60
      HealthCheckIntervalSeconds: 70
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "300"

  ECSLoadBalancerTargetGroupTest:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: Test-TG
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      TargetType: ip
      HealthCheckPath: "/"
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3


  # Application Load Balancer Listener (for HTTP traffic)
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ECSLoadBalancerTargetGroup
      LoadBalancerArn: !Ref TagFinderLoadBalancer
      Port: 80
      Protocol: HTTP

  TestListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref TagFinderLoadBalancer
      Port: 8443
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ECSLoadBalancerTargetGroupTest


  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref TagFinderCluster
      TaskDefinition: !Ref ECSTaskDefinition
      LaunchType: FARGATE
      DeploymentController:
        Type: CODE_DEPLOY
      SchedulingStrategy: REPLICA
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 60
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ECSServiceSecurityGroup
      LoadBalancers:
        - TargetGroupArn: !Ref ECSLoadBalancerTargetGroup
          ContainerName: tag-finder-container
          ContainerPort: 8080
      PropagateTags: SERVICE
      EnableECSManagedTags: true
    DependsOn:
      - Listener

  # IAM Role for Auto Scaling
  ECSAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ECSAutoScalingRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: ECSAutoScalingPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecs:UpdateService
                  - ecs:DescribeServices
                  - application-autoscaling:RegisterScalableTarget
                  - application-autoscaling:DescribeScalableTargets
                  - application-autoscaling:PutScalingPolicy
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:DeleteAlarms
                  - application-autoscaling:*
                Resource: "*"

  # Auto Scaling Target
  ECSAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: ECSService
    Properties:
      MaxCapacity: 3
      MinCapacity: 1
      ResourceId: !Join
        - '/'
        - - service
          - !Ref TagFinderCluster
          - !GetAtt ECSService.Name
      RoleARN: !GetAtt ECSAutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  # Auto Scaling Policy
  ECSAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ECSAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 60
        ScaleOutCooldown: 60


  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                  - codebuild:*
                  - codecommit:*
                  - codedeploy:*
                  - ecs:*
                  - ecr:*
                  - cloudwatch:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: "*"

  # CodePipeline
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineRole.Arn
      Tags:
        - Key: Name
          Value: TagFinderCodePipeline
      ArtifactStore:
        Type: S3
        Location: tag-finder-configs
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: '1'
              Configuration:
                S3Bucket: tag-finder-configs
                S3ObjectKey: deployment-package.zip
              OutputArtifacts:
                - Name: SourceOutput
        - Name: Deploy
          Actions:
            - Name: DeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeployToECS
                Version: '1'
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeployGroup
                TaskDefinitionTemplatePath: taskdef.json
                AppSpecTemplatePath: appspec.yaml
                TaskDefinitionTemplateArtifact: SourceOutput
                AppSpecTemplateArtifact: SourceOutput
              InputArtifacts:
                - Name: SourceOutput


  # CodeDeploy
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ComputePlatform: ECS

  
  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeDeployPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecs:*
                  - codedeploy:*
                  - iam:*
                  - elasticloadbalancing:*
                  - s3:*
                  - cloudwatch:*
                Resource: "*"


  # CodeDeploy Deployment Group
  CodeDeployGroup:
      Type: AWS::CodeDeploy::DeploymentGroup
      DependsOn: ECSService
      Properties:
        ApplicationName: !Ref CodeDeployApplication
        ServiceRoleArn: !GetAtt CodeDeployRole.Arn
        ECSServices:
          - ClusterName: !Ref TagFinderCluster
            ServiceName: !GetAtt ECSService.Name

        DeploymentConfigName: CodeDeployDefault.ECSAllAtOnce
        DeploymentStyle:
          DeploymentType: BLUE_GREEN
          DeploymentOption: WITH_TRAFFIC_CONTROL
        BlueGreenDeploymentConfiguration:
          TerminateBlueInstancesOnDeploymentSuccess:
            Action: TERMINATE
            TerminationWaitTimeInMinutes: 5
          DeploymentReadyOption:
            ActionOnTimeout: CONTINUE_DEPLOYMENT
            WaitTimeInMinutes: 0
        LoadBalancerInfo:
          TargetGroupPairInfoList:
            - TargetGroups:
                - Name: Main-TG
                - Name: Test-TG
              ProdTrafficRoute:
                ListenerArns:
                  - !Ref Listener
              TestTrafficRoute:
                ListenerArns:
                  - !Ref TestListener
